name: test
# Test

on:
  workflow_dispatch:
  
jobs:
  test:
    runs-on: windows-latest
    env:
      solution_name: PowerPlatformALMWithGitHub
      solution_checker_result_output_directory:  solutionchecker/
      RUNNER_DEBUG: 1

    steps:
    - name: Set powerapps_environment_domain_name as env variable
      run: echo "::set-env name=path_to_solution_zip_file::out/Solutions/${{ env.solution_name }}.zip"
      
    - uses: actions/checkout@v2
      with:
        lfs: true

    - name: Pack solution
      uses: microsoft/powerplatform-actions/pack-solution@v0
      with:
        solution-folder: Solutions/${{ env.solution_name }}
        solution-file: ${{ env.path_to_solution_zip_file }}
        solution-type: Unmanaged

    - name: Get PowerShell modules
      shell: powershell
      run: |
        Install-Module -Name Microsoft.PowerApps.Checker.PowerShell -Force -Verbose -Scope CurrentUser

    - name: Invoke solution checker
      shell: powershell
      run: |
        $rulesets = Get-PowerAppsCheckerRulesets -Geography Canada
        $rulesetToUse = $rulesets | where Name -NE 'AppSource Certification'
        
        $analyzeResult = Invoke-PowerAppsChecker -Geography Canada -ClientApplicationId '${{ secrets.APPLICATION_ID }}' `
          -TenantId '${{ secrets.TENANT_ID }}' -Ruleset $rulesetToUse -FileUnderAnalysis "${{ env.path_to_solution_zip_file }}" `
          -OutputDirectory "${{ env.solution_checker_result_output_directory }}" -ClientApplicationSecret (ConvertTo-SecureString -AsPlainText -Force -String '${{ secrets.CLIENT_SECRET }}')

    - name: Test
      shell: powershell
      run: |
        cd ${{ env.solution_checker_result_output_directory }}
        ls
