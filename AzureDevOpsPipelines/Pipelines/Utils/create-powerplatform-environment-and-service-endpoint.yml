# Pipeline used to create of a Power Platform environment and generate the associated Power Platform service endpoint

# Variables:
#   EnvironmentName - String - Not secret - Let user override
#   PowerPlatformEnvironmentSKU - String - Not secret - Let user override (pick one value: Production, Sandbox, Trial)
#   PowerPlatformEnvironmentAppsTemplates - String - Not secret - Let user override (eliminate the values you do not want: D365_Sales, D365_CustomerService, D365_FieldService, D365_ProjectServiceAutomation, D365_CDSSampleApp, D365_DeveloperEdition)
#   PowerPlatformEnvironmentLocation - String - Not secret - Let user override (ex: canada)
#   PowerPlatformEnvironmentLanguageCode - String - Not secret - Let user override (ex: 1033 for English)
#   PowerPlatformEnvironmentCurrencyName - String - Not secret - Let user override (ex: CAD)
#   TenantId - String - Secret - Do not let user override
#   ApplicationId - String - Secret - Do not let user override
#   ClientSecret - String - Secret - Do not let user override
#   PowerPlatformEnvironmentURLBase - String - Not secret - Let user override (ex: crm3.dynamics.com)
#   AzureDevOpsOrganizationURL - String - Not secret - Do not let user override (ex: https://dev.azure.com/<organization>/)
#   PatToken - String - Secret - Do not let user override
#   MainPowerPlatformServiceEndpointName - String - Not Secret - Do not let user override
#   GitHubPAT - String - Secret - Do not let user override

# Pipeline triggered manually
trigger: none

variables:
  # Full name of the targeted branch, extracted from 'Build.SourceBranch' or 'System.PullRequest.SourceBranch' predefined variables
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
    BranchName: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    BranchName: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]
  ServiceEndpointsFolderAbsolutePath: "$(System.DefaultWorkingDirectory)/AzureDevOpsPipelines/ServiceEndpoints"

stages:
# Stage for the creation of the Power Platform environment
- stage: 'PowerPlatformEnvironmentCreation'
  displayName: 'Power Platform Environment Creation'
  jobs:
    - job: 'PowerPlatformEnvironmentCreation'
      displayName: 'PowerPlatformEnvironmentCreation Job'
      pool:
        vmImage: 'windows-2019'

      steps:
      # Call to the pipeline template for the generation of a Power Platform Environment DomainName from the EnvironmentName variable
      - template: ../Templates/generate-powerplatform-environment-domainname-template.yml

      # Installation of the Power Platform Build Tools extension
      - task: PowerPlatformToolInstaller@0
        inputs:
          DefaultVersion: true

      # Creation of a new Power Platform Environment
      #   SKUs: Production, Sandbox, Trial
      #   AppsTemplates: D365_Sales, D365_CustomerService, D365_FieldService, D365_ProjectServiceAutomation, D365_CDSSampleApp, D365_DeveloperEdition
      - task: PowerPlatformCreateEnvironment@0
        inputs:
          authenticationType: 'PowerPlatformSPN'
          PowerPlatformSPN: '$(MainPowerPlatformServiceEndpointName)'
          DisplayName: '$(EnvironmentName)'
          EnvironmentSku: '$(PowerPlatformEnvironmentSKU)'
          AppsTemplate: '$(PowerPlatformEnvironmentAppsTemplates)'
          LocationName: '$(PowerPlatformEnvironmentLocation)'
          LanguageName: '$(PowerPlatformEnvironmentLanguageCode)'
          CurrencyName: '$(PowerPlatformEnvironmentCurrencyName)'
          DomainName: '$(generatePowerPlatformEnvironmentDomainName.PowerPlatformEnvironmentDomainName)'

# Call to the pipeline template for the creation of the Power Platform service endpoint associated to the new Power Platform environment we just created
- template: ../Templates/create-powerplatform-service-endpoint-template.yml